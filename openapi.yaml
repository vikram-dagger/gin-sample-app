openapi: 3.0.3
info:
  title: Books API
  description: A simple RESTful API for managing books using Gin and GORM
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/books:
    get:
      summary: List all books
      description: Returns a list of all books in the database
      operationId: getBooks
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal server error
    post:
      summary: Create a new book
      description: Creates a new book in the database
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /api/books/{id}:
    get:
      summary: Get a book by ID
      description: Returns a single book by its ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the book to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a book by ID
      description: Deletes a book given its ID
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the book to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
        '500':
          description: Internal server error

components:
  schemas:
    BookInput:
      type: object
      required:
        - title
        - author
      properties:
        title:
          type: string
          description: The title of the book
          example: "The Great Gatsby"
        author:
          type: string
          description: The author of the book
          example: "F. Scott Fitzgerald"

    Book:
      type: object
      properties:
        ID:
          type: integer
          format: int64
          description: The unique identifier of the book
          example: 1
        CreatedAt:
          type: string
          format: date-time
          description: When the book was created
        UpdatedAt:
          type: string
          format: date-time
          description: When the book was last updated
        DeletedAt:
          type: string
          format: date-time
          nullable: true
          description: When the book was deleted (soft delete)
        title:
          type: string
          description: The title of the book
          example: "The Great Gatsby"
        author:
          type: string
          description: The author of the book
          example: "F. Scott Fitzgerald"
